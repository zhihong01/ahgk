<?php@session_start();class interactionLive extends MY_Controller {    public function __construct() {        parent::__construct();        $this->load->model('interaction_live_model', 'interaction_live');        $this->load->model('interaction_live_photo_model', 'interaction_live_photo');        $this->load->model('interaction_live_record_model', 'interaction_live_record');		$this->load->model('site_branch_model', 'site_branch');		$this->load->model('openness_column_model', 'openness_column');    }    // 在线访谈    protected function itemLive($limit = 10, $offset = 0, $length = 60,  $date_format = 0, $time_length = 12, $description_length = 100, $iscast = FALSE,$ishot=false) {            $this->load->model('interaction_live_model', 'interaction_live');            $filter = array('status' => true, 'removed' => false, 'site_id' => $this->site_id);            $select = array('_id', 'title', 'photo', 'time', 'addr', 'guests', 'sponsor', 'intro', 'confirm_date');            $arr_sort = array('sort' => 'DESC');            $date_format = $this->date_foramt[$date_format];            $item_list = $this->interaction_live->find($filter, $limit, $offset, $select, $arr_sort);            if ($limit == 1 && !empty($item_list)) {                $item_list = array(0 => $item_list);            }            foreach ($item_list as $key => $item) {                $item_list[$key]['url'] = '/interactionLive/detail/' . $item['_id'] . '.html?r=' . time();                $item_list[$key]['photo_url'] = '/interactionLive/livePhoto/?_id=' . $item['_id'] . '&r=' . time();                $item_list[$key]['record_url'] = '/interactionLive/liveRecode/?_id=' . $item['_id'] . '&r=' . time();                $item_list[$key]['video_url'] = '/interactionLive/liveVideo/?_id=' . $item['_id'] . '&r=' . time();                $item_list[$key]['_id'] = (string) ($item['_id']);                $item['title'] = strip_tags(html_entity_decode($item['title']));                $item['intro'] = strip_tags($item['intro']);                $item['time'] = strip_tags($item['time']);                if (mb_strlen($item['title']) > $length) {                    $item_list[$key]['short_title'] = mb_substr($item['title'], 0, $length) . '...';                } else {                    $item_list[$key]['short_title'] = $item['title'];                }                if (mb_strlen($item['intro']) > $description_length) {                    $item_list[$key]['intro'] = mb_substr($item['intro'], 0, $description_length) . '...';                } else {                    $item_list[$key]['intro'] = $item['intro'];                }                if (mb_strlen($item['time']) > 30) {                    $item_list[$key]['time'] = mb_substr($item['time'], 0, 30) . '...';                } else {                    $item_list[$key]['time'] = $item['time'];                }                if (empty($item['photo'])) {                    $item_list[$key]['photo'] = '/media/images/ft/zxft.png';                }elseif(strstr($item['photo'],'data')){                    $item_list[$key]['photo']='http://www.hngov.cn'.$item['photo'];                }                $item_list[$key]['date'] = ($item['confirm_date']) ? date($date_format, $item['confirm_date']) : '';            }            return $item_list;    }    // 在线访谈（图片）    protected function itemLivePhoto($_id, $limit = 10, $offset = 0, $length = 60, $sort_by = 0, $date_format=0) {        $filter = array('live_id' => $_id, 'status' => true, 'removed' => false, 'site_id' => $this->site_id);        $select = array('_id', 'title', 'photo', 'create_date');        $arr_sort = array('sort' => 'DESC');        $date_format = $this->date_foramt[$date_format];        $item_list = $this->interaction_live_photo->find($filter, $limit, $offset, $select, $arr_sort);        if ($limit == 1 && !empty($item_list)) {            $item_list = array(0 => $item_list);        }        foreach ($item_list as $key => $item) {            $item_list[$key]['_id'] = $item['_id'];            $item_list[$key]['url'] = '/interactionLive/showImage/?_id=' . $item['_id'];            $item['title'] = strip_tags(html_entity_decode($item['title']));            if (mb_strlen($item['title']) > $length) {                $item_list[$key]['short_title'] = mb_substr($item['title'], 0, $length) . '...';            } else {                $item_list[$key]['short_title'] = $item['title'];            }            if (empty($item['photo'])) {                $item_list[$key]['nopic'] = true;                $item_list[$key]['photo'] = '/media/images/nopic.gif';            }elseif(strstr($item['photo'],'data')){				 $item_list[$key]['photo']='http://www.hngov.cn'.$item['photo'];			}            $item_list[$key]['date'] = ($item['create_date']) ? date($date_format, $item['create_date']) : '';        }        return $item_list;    }    // 在线访谈(文字)    protected function itemLiveRecord($_id, $limit = 10, $offset = 0, $length = 60, $sort_by = 0, $date_format) {        $filter = array('live_id' => $_id, 'status' => true, 'removed' => false, 'site_id' => $this->site_id);        $select = array();        $arr_sort = array('sort' => 'asc');        $date_format = $this->date_foramt[$date_format];        $item_list = $this->interaction_live_record->find($filter, $limit, $offset, $select, $arr_sort);        if ($limit == 1 && !empty($item_list)) {            $item_list = array(0 => $item_list);        }        $i = 1 + $offset;        foreach ($item_list as $key => $item) {            $item_list[$key]['_id'] = $item['_id'];            $item['title'] = strip_tags(html_entity_decode($item['title']));            if (mb_strlen($item['title']) > $length) {                $item_list[$key]['short_title'] = mb_substr($item['title'], 0, $length) . '...';            } else {                $item_list[$key]['short_title'] = $item['title'];            }            $item_list[$key]['askid'] = "提问 <b>" . $item['no'] . "</b>";            $item_list[$key]['addname'] = empty($item['creator']['name']) ? "网友提问" : $item['creator']['name'];            $item_list[$key]['content'] = str_replace("\n", "<br/>", str_replace(Chr(32), "&nbsp;", $item['content']));            $item_list[$key]['date'] = ($item['create_date']) ? date($date_format, $item['create_date']) : '';            $item_list[$key]['reply_date'] = ($item['reply_date']) ? date($date_format, $item['reply_date']) : '';            $item_list[$key]['reply_name'] = empty($item['reply_name']) ? "" : $item['reply_name'];            //$item_list[$key]['reply'] = empty($item['reply']) ? "暂无回复" : $item['reply'];			$item_list[$key]['reply'] = $item['reply'];            $i++;        }        return $item_list;    }		// 普通新闻列表    protected function itemList($_id_list, $limit = 10, $offset = 0, $length = 60, $date_format = 0, $description_length = 100) {        $this->load->model('content_model', 'content');        $arr_sort = array('sort' => 'DESC');        $date_format = $this->date_foramt[$date_format];        $select = array('_id', 'title', 'description','body', 'thumb_name', 'release_date', 'link_url');        $filter = array('channel' => $_id_list, 'status' => True, 'removed' => false, 'site_id' => $this->site_id);        $item_list = $this->content->find($filter, $limit, $offset, $select, $arr_sort);        //var_dump($item_list);        if ($limit == 1 && !empty($item_list)) {            $item_list = array(0 => $item_list);        }        foreach ($item_list as $key => $item) {            $item_list[$key]['url'] = '/content/detail/' . $item['_id'] . '.html';            $item_list[$key]['_id'] = (string) ($item['_id']);            $item['title'] = strip_tags(html_entity_decode($item['title']));            $item['description'] = strip_tags(html_entity_decode($item['description']));            $item_list[$key]['description'] = str_replace("\n", "<br/>", str_replace(Chr(32), "&nbsp;", $item['description']));            if (mb_strlen($item_list[$key]['description']) > $description_length) {                $item_list[$key]['description'] = mb_substr($item_list[$key]['description'], 0, $description_length) . '...';            } else {                $item_list[$key]['description'] = $item['description'];            }            if (mb_strlen($item_list[$key]['body']) > $description_length) {                $item_list[$key]['body'] = mb_substr($item_list[$key]['body'], 0, $description_length) . '...';            } else {                $item_list[$key]['body'] = $item['body'];            }            if (mb_strlen($item['title']) > $length) {                $item_list[$key]['short_title'] = mb_substr($item['title'], 0, $length) . '...';            } else {                $item_list[$key]['short_title'] = $item['title'];            }            $item_list[$key]['thumb'] = $item['thumb_name'];            $item_list[$key]['date'] = ($item['release_date']) ? date($date_format, $item['release_date']) : '';        }        return $item_list;    }		 // 友情链接    protected function friendLinkList($_id_list, $limit = 10, $offset = 0, $length = 60, $date_format = 0) {        $this->load->model('friend_link_model', 'friend_link');        $filter = array("type_id" => $_id_list, 'status' => true, 'removed' => False, 'site_id' => $this->site_id);        $arr_sort = array('sort' => 'DESC');        $date_format = $this->date_foramt[$date_format];        $select = array('_id', 'title', 'link_url', 'file_path', 'width', 'height', 'target', 'confirm_date');        $item_list = $this->friend_link->find($filter, $limit, $offset, $select, $arr_sort);        foreach ($item_list as $key => $item) {            $item_list[$key]['_id'] = (string) ($item['_id']);            $item_list[$key]['url'] = (string) ($item['link_url']);			$item_list[$key]['thumb'] = $item['file_path'];            if (mb_strlen($item['title']) > $length) {                $item_list[$key]['short_title'] = mb_substr($item['title'], 0, $length) . '...';            } else {                $item_list[$key]['short_title'] = $item['title'];            }            $item_list[$key]['date'] = ($item['confirm_date']) ? date($date_format, $item['confirm_date']) : '';        }/* 		echo "<pre>";		print_r($item_list);		die(); */        return $item_list;    }    protected function getMenu($channel_id, $limit = 50, $offset = 0, $length = 60) {        $result = array();        $this->load->model("site_channel_tree_model", "site_channel_tree");        $channel_tree = $this->site_channel_tree->find(array('_id' => $channel_id), 1);        if (isset($channel_tree['child'])) {            $i = 0;            foreach ($channel_tree['child'] as $key => $value) {                if ($i >= $limit) {                    break;                }                if ($i < $offset) {                    continue;                }                $result[$key] = mb_substr($value, 0, $length);                $i++;            }        }        return $result;    }		 public function index() {		        $page = (int) $this->security->xss_clean(htmlentities($this->input->get('page'),ENT_COMPAT,'UTF-8'));        if ($page == 0) {            $page = 1;        }        $total_row = $this->interaction_live->count(array('status' => true, 'removed' => false, 'iscast' => array("\$ne" => '1'), 'site_id' => $this->site_id,'type_id'=>1));        $View = new Blitz('template/interactionlive.html');        $struct_list = $View->getStruct();        foreach ($struct_list as $struct) {            $matches = array();            if (preg_match('@^/([a-z]+)-([\w\-]+)/$@', $struct, $matches)) {                $action = $matches[1];                $struct_val = trim($matches[0], '/');                $item_list = '';                //访谈公告                if ($action == 'list') {                    list($channel_id, $limit, $offset, $length, $date_format, $description_length) = explode('_', $matches[2]);                    if ($offset == 'page') {                        $offset = $limit * ($page - 1);                    }                    $item_list = $this->itemList($channel_id, $limit, $offset, $length, $date_format, $description_length);                }                //访谈回顾                if ($action == 'live') {                    list( $limit, $offset, $length, $date_format, $time_length, $description_length) = explode('_', $matches[2]);                    if ($offset == 'page') {                        $offset = $limit * ($page - 1);                    }                    $item_list = $this->itemLive($limit, $offset, $length, $date_format, $time_length, $description_length);                }								if ($action == 'hotlive') {                    list($channel_id, $limit, $offset, $length, $date_format, $time_length, $description_length) = explode('_', $matches[2]);                    if ($offset == 'page') {                        $offset = $limit * ($page - 1);                    }                    $item_list = $this->itemLive($limit, $offset, $length, $date_format, $time_length, $description_length,false,true);                }                if ($action == 'nextlive') {                    list($channel_id, $limit, $offset, $length, $sort_by, $date_format) = explode('_', $matches[2]);                    $_id_list = explode('-', $channel_id);                    if ($offset == 'page') {                        $offset = $limit * ($page - 1);                    }                    $item_list = $this->interaction_live->find(array('status' => True));					$item_list['time']=mb_substr($item_list['time'],0,16);					                }                elseif ($action == 'menu') {                    list($parent_id, $limit, $offset, $length) = explode('_', $matches[2]);                    if ($parent_id != 'current') {                        $channel_id = $parent_id;                    } else {                        $channel_id = $parent_channel['_id'];                    }                    $menu_list = $this->getMenu($channel_id, $limit, $offset, $length);                    $i = 0;                    foreach ($menu_list as $key => $menu) {                        $item_list[$i]['_id'] = $key;                        $item_list[$i]['url'] = $this->folder_prefix . '/channel/' . $key . '/';                        $item_list[$i]['name'] = $menu;                        $i++;                    }                }                //分页                if ($action == 'page') {                    $per_count = (int) $matches[2];                    if ($per_count == 0) {                        $per_count = 20;                    }                    $item_list = array('page' => $this->getPagination($total_row, $page, $per_count, true));                }			    if ($action == 'friendlink') {                    list($channel_id, $limit, $offset, $length, $date_format) = explode('_', $matches[2]);                    $item_list = $this->friendLinkList($channel_id, $limit, $offset, $length, $date_format);                }                $this->data[$struct_val] = $item_list;            }        }		$this->data['location']='<a href="/">首页</a> > <a href="/interaction/">政民互动</a> > 国土访谈';        $View->display($this->data);    }    public function detail() {        $_id = (string) $this->input->get('_id');        $live = $this->interaction_live->find(array('_id' => $_id, 'status' => true, 'removed' => false, 'site_id' => $this->site_id));		        if (empty($live)) {            show_404();        }        if (!empty($live['link_url'])) {            header("Location: " . $live['link_url']);            exit();        }        $account_id = $_SESSION['account_id'];        $nickname = $_SESSION['nickname'];        // 判断是否在访谈时间范围内        if ($live['startdate'] < time() && $live['overdate'] > time()) {            $data['is_range'] = true;            // 判断是否可以发言            if ($live['isask'] == 1) {                // 如果开启了非注册会员发言                if ($live['ismember'] == 1) {                    $data['can_speak'] = true;                } else if (!empty($account_id)) {                     $data['can_speak'] = true;                }            }        }        if ($account_id) {            $data['nickname'] = $nickname;        }        $View = new Blitz('template/interactionLive/detail-interview.html');        $struct_list = $View->getStruct();        //直播图片        $live_photo = $this->interaction_live_photo->find(array('live_id' => $_id, 'status' => true, 'removed' => false, 'site_id' => $this->site_id), null, 0, null, array('sort' => 'DESC'));        if (count($live_photo) > 4) {            $data['scroll'] = true;        }        foreach ($live_photo as $item) {            $View->block('/livephoto', array('url' => '/interactionLive/showImage/?_id=' . (string) $item['_id'], 'title' => $item['title'], 'photo' => $item['photo']));        }        //访谈结束时按时间正序排序        if ($live['startdate'] < time() && $live['overdate'] > time()) {            $sort = array('sort' => 'DESC');        } else {            $sort = array('sort' => 'ASC');        }        //文字直播        $live_record = $this->interaction_live_record->find(array('live_id' => $_id, 'status' => true, 'removed' => false, 'site_id' => $this->site_id), null, 0, null, $sort);       	   $k=1;        foreach ($live_record as $item) {            $item['reply_date'] = (empty($item['reply_date'])) ? '' : date('H:i:s', $item['reply_date']);            $askid = "提问 <b>" . $item['no'] . "</b>";            $item['content'] = str_replace("\n", "<br/>", str_replace(Chr(32), "&nbsp;", $item['content']));            if ($item['reply_thumb_name']) {                $item['reply'].='&nbsp;&nbsp;<a href="' . $item['reply_thumb_name'] . '" style="color: #d60300;" target="_blank">查看图片》</a>';            }			$item['is_not_web'] = $item['isweb']==1?1:0;            $View->block('/liverecord', 			array(			'id' => $askid, 			'is-bg'=>$k%2==0?'style="background:#f6f6f6"':'',			'addname' => empty($item['creator']['name']) ? "网友提问" : $item['creator']['name'], 			'content' => $item['content'], 			'create_date' => date('H:i:s', $item['create_date']), 			'reply_name' => empty($item['reply_name']) ? "" : "【".$item['reply_name']."】", 			'reply' => nl2br($item['reply']), 			'reply_open' => (int) $item['reply_open'], 			'reply_date' => $item['reply_date'],			'is_not_web' => $item['is_not_web']));            unset($askid);			$k++;        }        $live['starttxt'] = str_replace("\n", "<br/>", str_replace(Chr(32), "&nbsp;", $live['starttxt']));        $live['overtxt'] = str_replace("\n", "<br/>", str_replace(Chr(32), "&nbsp;", $live['overtxt']));		//访谈简介		         $live['intro'] = str_replace("\n", "<br/>", str_replace(Chr(32), "&nbsp;", $live['intro']));		 if (mb_strlen($live['intro']) > 100) {                $live['intro'] = mb_substr($live['intro'], 0, 100) . '...';            } else {                $live['intro'] = $live['intro'];            }        $live['summarys'] = str_replace("\n", "<br/>", str_replace(Chr(32), "&nbsp;", $live['summarys']));		//访谈单位简介        $live['branch_intro'] = str_replace("\n", "<br/>", str_replace(Chr(32), "&nbsp;", $live['branch_intro']));        if (empty($live['photo'])) {            $live['photo'] = '/media/images/ft/zxft.png';        }        $guestnames = explode(",", $live['guests']);        $guest = array();        if (count($guestnames) > 2) {            $data["is_guest"] = true;            foreach ($guestnames as $item) {                $guest[]['name'] = $item;            }        } else {            $data["is_guest"] = FALSE;        }        $data['guest'] = $guest;		$live['title']=mb_substr(strip_tags($live['title']), 0, 36);		$live['addr']=mb_substr(strip_tags($live['addr']), 0, 26);		$live['table_name']='interaction_live';        $data['live'] = $live;                $data['location'] = '<a href="/">网站首页</a> > <a href="/interaction/">政民互动</a> > <a href="/interactionLive/">在线访谈</a> > <span>' . $live['title'] . '</span>';        $View->display($data);    }    public function create() {				// $captcha_chars = $_SESSION['captcha_chars'];        // if ((strlen($captcha_chars) != 4) || (strcasecmp($captcha_chars, $this->input->post('vcode')) != 0)) {             // $this->resultJson('验证码不正确', 3);         // }        // 如果是已登录用户，取他的信息       // $account = $this->is_login();        if ($account) {            $creator_id = $account['_id'];            $creator_name = $account['nickname'];            $email = $account['email'];            $phone = $account['phone'];        } else {            $creator_name = $this->input->post('creator_name');            $creator_id = time();            $email = '';            $phone = $this->input->post('phone');        }        $data = $this->input->post('data');        if (empty($creator_name)) {            $this->resultJson('请输入您的姓名！');        }		/*if (empty($phone)) {            $this->resultJson('请输入您的手机号码！');        }*/        if (empty($data['content'])) {            $this->resultJson('请输入您想说的话！');        }        $this->load->model("interaction_live_record_model", "interaction_live_record");        $data['live_id'] = $data['live_id'];        $data['isweb'] = 0;        $data['create_date'] = time();         $data['sort'] = time();        $data['status'] = False;        $data['creator'] = array('id' => $creator_id, 'name' => $creator_name);        $data['site_id'] = $this->site_id;        $data['email'] = $email;        $data['phone'] = $phone;        $data['client_ip'] = $this->input->ip_address();        $data['removed'] = false;        $data['no'] = 0;        $result = $this->interaction_live_record->create($data);		$this->resetNo($data['live_id']);        if ($result) {            $referer = "/interactionLive/detail/nocache/" . $data['live_id'] . '.html';            $this->resultJson('提交成功！谢谢您的参与。', 2, array('url' => $referer));        } else {            $this->resultJson('提交失败,请重试！');        }    }		//自动编号    protected function resetNo($lid) {        $this->load->model("interaction_live_record_model", "interaction_live_record");        $filter_list = array();        $filter_list["site_id"] = $this->site_id;        //$filter_list['status'] = true;        $filter_list['removed'] = false;        $filter_list["live_id"] = $lid;        $record_list = $this->interaction_live_record->find($filter_list, null, 0, "*", array('sort' => 'ASC'));        $no =1;        foreach($record_list as $k=>$v) {            $this->interaction_live_record->update(array("_id"=>$v['_id']), array("no" => $no) );            $no ++ ;        }    }    // 实时获取留言信息    public function getRecode() {        header("Content-Type: text/xml;charset=utf-8");        header("Cache-Control: no_cache");        $_id = (string) $this->input->post('_id');        //$last_time = $_SESSION['live_update_time'];        $live_record = $this->interaction_live_record->find(array('live_id' => $_id, 'status' => true, 'removed' => false, 'site_id' => $this->site_id), null, 0, null, array('sort' => 'DESC'));        $messageInfo = "<catalog><count>" . count($live_record) . "</count>";        foreach ($live_record as $item) {            $item['reply_date'] = (empty($item['reply_date'])) ? ' ' : date('H:i:s', $item['reply_date']);            if (empty($item['creator']['name'])) {                $item['creator']['name'] = '匿名';            }            if (empty($item['reply_name'])) {                $item['reply_name'] = ' ';            }            if (empty($item['reply'])) {                $item['reply'] = ' ';            }            $content = htmlspecialchars(str_replace("\n", "<br/>", str_replace(Chr(32), "&nbsp;", $item['content'])));            $askid = "提问 " . $item['no'];            // 判断回复是否公开            if ((int) $item['reply_open'] == 1) {                $messageInfo.="<id>" . $askid . "</id><creator_name>" . $item['creator']['name'] . "</creator_name><content>" . $content . "</content><create_date>" . date('H:i:s', $item['create_date']) . "</create_date><reply_name>" . $item['reply_name'] . "</reply_name><reply>" . $item['reply'] . "</reply><reply_date>" . $item['reply_date'] . "</reply_date>";            } else {                $messageInfo.="<id>" . $askid . "</id><creator_name>" . $item['creator']['name'] . "</creator_name><content>" . $content . "</content><create_date>" . date('H:i:s', $item['create_date']) . "</create_date><reply_name>0</reply_name><reply>0</reply><reply_date>0</reply_date>";            }        }        $messageInfo.="</catalog>";        echo $messageInfo;    }    public function livePhoto() {        $_id = (string) $this->input->get('_id');        $page = (int) $this->input->get('page');        if ($page == 0) {            $page = 1;        }        $live = $this->interaction_live->find(array('_id' => $_id, 'status' => true, 'removed' => false, 'site_id' => $this->site_id), 1, 0, array('_id', 'title', 'intro', 'link_url'));        if (empty($live)) {            show_404();        }        if (!empty($live['link_url'])) {            header("Location: " . $live['link_url']);            exit();        }        $live['intro'] = str_replace("\n", "<br/>", str_replace(Chr(32), "&nbsp;", $live['intro']));        $total_row = $this->interaction_live_photo->count(array('live_id' => $_id, 'status' => true, 'removed' => false, 'site_id' => $this->site_id));        $View = new Blitz('template/interactionLive/photo.html');        $struct_list = $View->getStruct();        $data = array();        foreach ($struct_list as $struct) {            $matches = array();            if (preg_match('@^/([a-z]+)-([\w\-]+)/$@', $struct, $matches)) {                $action = $matches[1];                $struct_val = trim($matches[0], '/');                $item_list = '';                if ($action == 'list') {                    list($channel_id, $limit, $offset, $length, $sort_by, $date_format) = explode('_', $matches[2]);                    if ($offset == 'page') {                        $offset = $limit * ($page - 1);                    }                    if ($channel_id == 'current') {                        $channel_id = $_id;                    }                    $item_list = $this->itemLivePhoto($channel_id, $limit, $offset, $length, $sort_by, $date_format);                } elseif ($action == 'page') {                    $per_count = (int) $matches[2];                    if ($per_count == 0) {                        $per_count = 20;                    }                    $item_list = array('page' => $this->getPagination($total_row, $page, $per_count, FALSE));                }                $data[$struct_val] = $item_list;            }        }        $data['live'] = $live;        $data['location'] = '<a href="/">首页</a> > <a href="/interaction/">政民互动</a> > <a href="/interactionLive/">在线访谈</a> > <a href="/interactionLive/detail/nocache/' . $live['_id'] . '.html?r=' . rand(0, 99) . '">' . $live['title'] . '</a> > <span>图片直播</span>';        $View->display($data);    }   public function liveRecode() {        $_id = (string) $this->input->get('_id');        $page = (int) $this->input->get('page');        if ($page == 0) {            $page = 1;        }        $live = $this->interaction_live->find(array('_id' => $_id, 'status' => true, 'removed' => false, 'site_id' => $this->site_id), 1, 0, array('_id', 'title', 'intro', 'link_url','vodaddr','old_vodaddr','video_name'));        if (empty($live)) {            show_404();        }        if (!empty($live['link_url'])) {            header("Location: " . $live['link_url']);            exit();        }        $live['intro'] = str_replace("\n", "<br/>", str_replace(Chr(32), "&nbsp;", $live['intro']));        $total_row = $this->interaction_live_record->count(array('live_id' => $_id, 'status' => true, 'removed' => false, 'site_id' => $this->site_id));        $View = new Blitz('template/interactionLive/record.html');        $struct_list = $View->getStruct();        $data = array();        foreach ($struct_list as $struct) {            $matches = array();            if (preg_match('@^/([a-z]+)-([\w\-]+)/$@', $struct, $matches)) {                $action = $matches[1];                $struct_val = trim($matches[0], '/');                $item_list = '';                if ($action == 'list') {                    list($channel_id, $limit, $offset, $length, $sort_by, $date_format) = explode('_', $matches[2]);                    if ($offset == 'page') {                        $offset = $limit * ($page - 1);                    }                    if ($channel_id == 'current') {                        $channel_id = $_id;                    }                    $item_list = $this->itemLiveRecord($channel_id, $limit, $offset, $length, $sort_by, $date_format);                } elseif ($action == 'page') {                    $per_count = (int) $matches[2];                    if ($per_count == 0) {                        $per_count = 20;                    }                    $item_list = array('page' => $this->getPagination($total_row, $page, $per_count, FALSE));                }                $data[$struct_val] = $item_list;            }        }        $data['live'] = $live;		$data['location'] = '<a href="/">首页</a> > <a href="/interaction/">政民互动</a> > <a href="/interactionLive/">在线访谈</a> > <a href="/interactionLive/detail/nocache/' . $live['_id'] . '.html?r=' . rand(0, 99) . '">' . $live['title'] . '</a> > <span>访谈实录</span>';        $View->display($data);    }	    public function getLiveHtml() {        $_id = (string) $this->input->get('_id');        $live = $this->interaction_live->find(array('_id' => $_id, 'status' => true, 'removed' => false, 'site_id' => $this->site_id));        $View = new Blitz('template/interactionLive/getLiveHtml.html');		$struct_list = $View->getStruct();        //访谈结束时按时间正序排序        if ($live['startdate'] < time() && $live['overdate'] > time()) {            $sort = array('sort' => 'DESC');        } else {            $sort = array('sort' => 'ASC');        }        //文字直播        $live_record = $this->interaction_live_record->find(array('live_id' => $_id, 'status' => true, 'removed' => false, 'site_id' => $this->site_id), null, 0, null, $sort);            foreach ($live_record as $item) {            $item['reply_date'] = (empty($item['reply_date'])) ? '' : date('H:i:s', $item['reply_date']);            $askid = "提问 <b>" . $item['no'] . "</b>";            $item['content'] = str_replace("\n", "<br/>", str_replace(Chr(32), "&nbsp;", $item['content']));            if ($item['reply_thumb_name']) {                $item['reply'].='&nbsp;&nbsp;<a href="' . $item['reply_thumb_name'] . '" style="color: #d60300;" target="_blank">查看图片》</a>';            }            $View->block('/liverecord', array(			'id' => $askid, 			'addname' => empty($item['creator']['name']) ? "网友提问" : $item['creator']['name'], 			'content' => $item['content'], 			'create_date' => date('H:i:s', $item['create_date']), 			'reply_name' => empty($item['reply_name']) ? "和县人民政府" : $item['reply_name'], 			'reply' => $item['reply'], 			'reply_open' => $item['reply_open'], 			'reply_date' => $item['reply_date']));            unset($askid);        }        $live['starttxt'] = str_replace("\n", "<br/>", str_replace(Chr(32), "&nbsp;", $live['starttxt']));        $live['overtxt'] = str_replace("\n", "<br/>", str_replace(Chr(32), "&nbsp;", $live['overtxt']));        $live['content'] = str_replace("\n", "<br/>", str_replace(Chr(32), "&nbsp;", $live['content']));        $live['summarys'] = str_replace("\n", "<br/>", str_replace(Chr(32), "&nbsp;", $live['summarys']));        $live['intro'] = str_replace("\n", "<br/>", str_replace(Chr(32), "&nbsp;", $live['intro']));        if (empty($live['photo'])) {            $live['photo'] = '/media/images/default-live-pictrue.jpg';        }        $guestnames = explode(",", $live['guestnames']);        $guest = array();        if (count($guestnames) > 2) {            $data["is_guest"] = true;            foreach ($guestnames as $item) {                $guest[]['name'] = $item;            }        } else {            $data["is_guest"] = FALSE;        }        $data['guest'] = $guest;        $data['live'] = $live;        $View->display($data);	}}/* End of file interactionLive.php *//* Location: ./application/controllers/interactionLive.php */