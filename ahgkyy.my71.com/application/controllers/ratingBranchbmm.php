<?phpclass ratingBranchbmm extends MY_Controller {    public function __construct() {        parent::__construct();        $this->branch_list = $this->getBranchName();        $this->question_list = $this->questionList();    }    // 友情链接    protected function friendLinkList($_id_list, $limit = 10, $offset = 0, $length = 60, $date_format = 0) {        $this->load->model('friend_link_model', 'friend_link');        $filter = array("type_id" => $_id_list, 'status' => true, 'removed' => False, 'site_id' => $this->site_id);        $arr_sort = array('sort' => 'ASC');        $date_format = $this->date_foramt[$date_format];        $select = array('_id', 'title', 'link_url', 'file_path', 'width', 'height', 'target', 'confirm_date');        $item_list = $this->friend_link->find($filter, $limit, $offset, $select, $arr_sort);        foreach ($item_list as $key => $item) {            $item_list[$key]['_id'] = (string) ($item['_id']);            $item_list[$key]['url'] = (string) ($item['link_url']);            $item_list[$key]['thumb'] = (string) ($item['file_path']);			if(strstr($item_list[$key]['thumb'],'jingxian.u.my71.com')&&!strstr($item_list[$key]['thumb'],'user.ahjx.gov.cn')){					 $item_list[$key]['thumb']= str_replace('jingxian.u.my71.com', 'user.ahjx.gov.cn',(string)$item_list[$key]['thumb']);			}            if (mb_strlen($item['title']) > $length) {                $item_list[$key]['short_title'] = mb_substr($item['title'], 0, $length) . '...';            } else {                $item_list[$key]['short_title'] = $item['title'];            }            $item_list[$key]['date'] = ($item['confirm_date']) ? date($date_format, $item['confirm_date']) : '';        }        return $item_list;    }    // 普通新闻列表    protected function itemList($_id_list, $limit = 10, $offset = 0, $length = 60, $sort_by = 0, $date_format = 0, $description_length = 100) {        $this->load->model('content_model', 'content');        $arr_sort = array('sort' => 'DESC');        $date_format = $this->date_foramt[$date_format];        $select = array('_id', 'title', 'link_url', 'description', 'thumb_name', 'release_date', 'copysource_url');        $filter = array('status' => True, 'removed' => false, 'site_id' => $this->site_id);        $item_list = $this->content->findList($_id_list, NULL, $filter, NULL, NULL, $limit, $offset, $select, $arr_sort);        if ($limit == 1 && !empty($item_list)) {            $item_list = array(0 => $item_list);        }        foreach ($item_list as $key => $item) {            $item_list[$key]['copysource_url'] = $item['copysource_url'];            $item_list[$key]['url'] = !empty($item['link_url']) ? $item['link_url'] : '/content/detail/' . $item['_id'] . '.html';            $item_list[$key]['_id'] = (string) ($item['_id']);            $item['title'] = strip_tags(html_entity_decode($item['title']));            $item['description'] = strip_tags(html_entity_decode($item['description']));            if (mb_strlen($item['title']) > $length) {                $item_list[$key]['short_title'] = mb_substr($item['title'], 0, $length) . '...';            } else {                $item_list[$key]['short_title'] = $item['title'];            }            if (mb_strlen($item['description']) > $description_length) {                $item_list[$key]['description'] = mb_substr($item['description'], 0, $description_length) . '...';            }            $item_list[$key]['thumb'] = $item['thumb_name'];            $item_list[$key]['date'] = ($item['release_date']) ? date($date_format, $item['release_date']) : '';        }        return $item_list;    }    // 获取互动信件列表    protected function itemSupervision($filter, $limit = 10, $offset = 0, $length = 60, $sort_by = 0, $date_format = 0) {        $this->load->model('supervision_model', 'supervision');        $filter = array_merge($filter, array('status' => true, 'cancelled' => false, 'removed' => False, 'site_id' => $this->site_id));        $select = array('_id', 'process_status', 'subject', 'create_date', 'branch_id', 'hit','no');        $arr_sort = array('create_date' => "DESC");        $date_format = $this->date_foramt[$date_format];        $item_list = $this->supervision->find($filter, $limit, $offset, $select, $arr_sort);		        if ($limit == 1 && !empty($item_list)) {            $item_list = array(0 => $item_list);        }        foreach ($item_list as $key => $item) {            $item_list[$key]['url'] = '/supervision/detail/' . $item['_id'] . '.html';            $item_list[$key]['_id'] = (string) ($item['_id']);            // 留言的状态            if (isset($this->supervision_status[$item['process_status']])) {                $item_list[$key]['process_status'] = $this->supervision_status[$item['process_status']];            } else {                $item_list[$key]['process_status'] = $this->supervision_status[0];            }            // 取部门            if (isset($this->branch_list[$item['branch_id']])) {                $item_list[$key]['branch_name'] = $this->branch_list[$item['branch_id']];            } else {                $item_list[$key]['branch_name'] = '';            }            $item_list[$key]['short_branch_name'] = mb_substr($item_list[$key]['branch_name'], 0, 6);            //信件问题类别            if (isset($this->question_list[$item['question_id']])) {                $item_list[$key]['question_name'] = $this->question_list[$item['question_id']];            } else {                $item_list[$key]['question_name'] = '';            }            $item['subject'] = strip_tags(html_entity_decode($item['subject']));            if (mb_strlen($item['subject']) > $length) {                $item_list[$key]['short_title'] = mb_substr($item['subject'], 0, $length) . '...';            } else {                $item_list[$key]['short_title'] = $item['subject'];            }            $item_list[$key]['title'] = $item['subject'];            $item_list[$key]['date'] = ($item['create_date']) ? date($date_format, $item['create_date']) : '';        }        return $item_list;    }    // 在线访谈    protected function itemLive($type_id, $limit = 10, $offset = 0, $length = 60, $sort_by = 0, $date_format = 0, $time_length = 12, $description_length = 100, $iscast = FALSE) {        $this->load->model('interaction_live_model', 'interaction_live');        if ($iscast) {            $filter = array('type_id' => $type_id, 'status' => true, 'removed' => false, 'site_id' => $this->site_id, 'iscast' => '1');        } else {            $filter = array('type_id' => $type_id, 'status' => true, 'removed' => false, 'site_id' => $this->site_id, 'iscast' => array("\$ne" => '1'));        }        $select = array('_id', 'title', 'photo', 'time', 'addr', 'guests', 'sponsor', 'intro', 'create_date', 'isvod','receive','manage');        $arr_sort = array('confirm_date' => 'DESC');        $date_format = $this->date_foramt[$date_format];        $item_list = $this->interaction_live->find($filter, $limit, $offset, $select, $arr_sort);        if ($limit == 1 && !empty($item_list)) {            $item_list = array(0 => $item_list);        }        foreach ($item_list as $key => $item) {            $item_list[$key]['url'] = $type_id == 1 ? '/interactionLive/detail/nocache/' . $item['_id'] . '.html?r=' . time() : '/interactionPublish/detail/nocache/' . $item['_id'] . '.html?r=' . time();            $item_list[$key]['video_url'] = '/interactionLive/liveVideo/?_id=' . $item['_id'] . '&r=' . time();            $item_list[$key]['_id'] = (string) ($item['_id']);            $item['title'] = strip_tags(html_entity_decode($item['title']));            if (mb_strlen($item['title']) > $length) {                $item_list[$key]['short_title'] = mb_substr($item['title'], 0, $length) . '...';            } else {                $item_list[$key]['short_title'] = $item['title'];            }            // 访谈嘉宾，长度在此写死            if (mb_strlen($item['guests']) > 25) {                $item_list[$key]['guests'] = mb_substr(strip_tags($item['guests']), 0, 25) . '...';            }            if (mb_strlen($item['intro']) > $description_length) {                $item_list[$key]['intro'] = mb_substr(strip_tags($item['intro']), 0, $description_length) . '...';            }            if (mb_strlen($item['time']) > $time_length) {                $item_list[$key]['time'] = mb_substr(strip_tags($item['time']), 0, $time_length) . '...';            }            $item_list[$key]['addr'] = mb_substr(strip_tags($item['addr']), 0, 12);            if (empty($item['photo'])) {                $item_list[$key]['photo'] = '/media/images/default-live-pictrue.jpg';            }            $item_list[$key]['date'] = ($item['create_date']) ? date($date_format, $item['create_date']) : '';        }        return $item_list;    }    // 民意征集    protected function itemColl($type, $limit = 10, $offset = 0, $length = 60, $sort_by = 0, $date_format = 0) {        $this->load->model('interaction_coll_model', 'interaction_coll');        $filter = array('status' => true, 'removed' => false, 'site_id' => $this->site_id);        $select = array('_id', 'title', 'confirm_date', 'release_date', 'link_url');        $arr_sort = array('sort' => 'DESC');        $date_format = $this->date_foramt[$date_format];        $item_list = $this->interaction_coll->find($filter, $limit, $offset, $select, $arr_sort);        if ($limit == 1 && !empty($item_list)) {            $item_list = array(0 => $item_list);        }        foreach ($item_list as $key => $item) {            $item_list[$key]['url'] = !empty($item['link_url']) ? $item['link_url'] : '/interactionColl/detail/nocache/' . $item['_id'] . '.html';            $item_list[$key]['_id'] = (string) ($item['_id']);            $item['title'] = strip_tags(html_entity_decode($item['title']));            if (mb_strlen($item['title']) > $length) {                $item_list[$key]['short_title'] = mb_substr($item['title'], 0, $length) . '...';            } else {                $item_list[$key]['short_title'] = $item['title'];            }            $item_list[$key]['date'] = ($item['release_date']) ? date($date_format, $item['release_date']) : '';        }        return $item_list;    }    // 在线调查    protected function itemVote($channel_id, $limit = 10, $offset = 0, $length = 60, $sort_by = 0, $date_format = 0) {        $this->load->model('interaction_vote_model', 'interaction_vote');        $filter = array('status' => true, 'removed' => false, 'site_id' => $this->site_id);        $select = array('_id', 'name', 'confirm_date', 'startdate', 'link_url');        $arr_sort = array('sort' => 'DESC');        $date_format = $this->date_foramt[$date_format];        $item_list = $this->interaction_vote->find($filter, $limit, $offset, $select, $arr_sort);        if ($limit == 1 && !empty($item_list)) {            $item_list = array(0 => $item_list);        }        foreach ($item_list as $key => $item) {            $item_list[$key]['url'] = !empty($item['link_url']) ? $item['link_url'] : '/interactionVote/detail/?_id=' . $item['_id'];            $item_list[$key]['_id'] = (string) ($item['_id']);            $item['name'] = strip_tags(html_entity_decode($item['name']));            if (mb_strlen($item['name']) > $length) {                $item_list[$key]['short_title'] = mb_substr($item['name'], 0, $length) . '...';            } else {                $item_list[$key]['short_title'] = $item['name'];            }            $item_list[$key]['title'] = $item['name'];            $item_list[$key]['date'] = ($item['startdate']) ? date($date_format, $item['startdate']) : '';        }        return $item_list;    }    // 网上评议    protected function itemComment($limit = 10, $offset = 0, $length = 60, $sort_by = 0, $date_format = 0) {        $this->load->model('interaction_comment_list_model', 'interaction_comment_list');        $filter = array('status' => true, 'removed' => false, 'site_id' => $this->site_id);        $select = array('_id', 'title', 'create_date');        $arr_sort = array('sort' => 'DESC');        $date_format = $this->date_foramt[$date_format];        $item_list = $this->interaction_comment_list->find($filter, $limit, $offset, $select, $arr_sort);        foreach ($item_list as $key => $item) {            $item_list[$key]['_id'] = (string) ($item['_id']);            $item_list[$key]['url'] = '/interactionComment/detail/nocache/' . $item['_id'] . '.html';            $item['title'] = strip_tags(html_entity_decode($item['title']));            if (mb_strlen($item['title']) > $length) {                $item_list[$key]['short_title'] = mb_substr($item['title'], 0, $length) . '...';            } else {                $item_list[$key]['short_title'] = $item['title'];            }            $item_list[$key]['date'] = ($item['create_date']) ? date($date_format, $item['create_date']) : '';        }        return $item_list;    }    // 部门列表    protected function itemBranch($channel_id, $limit = 20, $offset = 0, $length = 10) {        $this->load->model('site_branch_model', 'site_branch');        $filter = array('parent_id' => $channel_id, 'status' => true, 'supervision_on' => true, 'removed' => False);        $select = array('_id', 'name', 'id');        $arr_sort = array('sort' => 'DESC');        $item_list = $this->site_branch->find($filter, $limit, $offset, $select, $arr_sort);        foreach ($item_list as $key => $item) {            if ($item['_id'] == $current_id) {                $item_list[$key]['aon'] = 'class="aon"';            } else {                $item_list[$key]['aon'] = '';            }            if (mb_strlen($item['name']) > $length) {                $item_list[$key]['short_name'] = mb_substr($item['name'], 0, $length) . '...';            } else {                $item_list[$key]['short_name'] = $item['name'];            }            $item_list[$key]['url'] = '/supervision/branch/?_id=' . $item['_id'];        }        return $item_list;    }    // 信件排行    protected function itemSupervisionBranchCounter($limit, $sort_by) {        $this->load->model('supervision_branch_counter_model', 'supervision_branch_counter');        $filter = array('site_id' => $this->site_id, 'removed' => False, 'is_sys' => true, 'branch_id' => array("\$ne" => ""));        $select = array('branch_id', 'total', 'replyRate', 'totalReply');        $arr_sort = array("replyRate"=>'DESC',"total"=>'DESC');        $item_list = $this->supervision_branch_counter->find($filter, $limit, 0, $select, $arr_sort);		//echo "<pre>";print_r($item_list);die();        foreach ($item_list as $key => $item) {            $item_list[$key]['key'] = $key + 1;            if (isset($this->branch_list[$item['branch_id']])) {                $item_list[$key]['branch_name'] = $this->branch_list[$item['branch_id']];            } else {                $item_list[$key]['branch_name'] = '';            }            $item_list[$key]['url'] = '/supervision/branch/?_id=' . $item['branch_id'];            $item_list[$key]['replyRate'] = mb_substr($item['replyRate'], 0, 5) . '%';            //$item_list[$key]['totalReply'] = mb_substr($item['totalReply'], 0, 5).'%';        }        return $item_list;    }    // 广告    protected function advertList($location_id, $limit = 10, $offset = 0) {        $this->load->model('advert_resource_model', 'advert_resource');        $this->load->model('advert_size_model', 'advert_size');        $filter = array('site_id' => $this->site_id, 'location_id' => $location_id, 'status' => True, 'removed' => false);        $select = array('_id', 'name', 'media_path', 'target_url', 'start_date', 'end_date', 'size_id');        $sort_by = array('sort' => 'DESC');        $item_list = $this->advert_resource->find($filter, $limit, $offset, $select, $sort_by);        if ($limit == 1) {            $item_list = array(0 => $item_list);        }        foreach ($item_list as $key => $item) {            $item_list[$key]['_id'] = (string) $item['_id'];            $item_list[$key]['url'] = $item['target_url'];            $item_list[$key]['thumb'] = $item['media_path'];            if (!empty($item['target_url'])) {                $item_list[$key]['have_advert'] = 1;            }            // 判断有没有位置信息            if (!empty($item['size_id'])) {                $size_list = $this->advert_size->find(array('_id' => (string) $item['size_id'], 'site_id' => $this->site_id, 'removed' => false), 1, 0, array('width', 'height'));                if (empty($size_list['width'])) {                    $item_list[$key]['width'] = '300';                } else {                    $item_list[$key]['width'] = $size_list['width'];                }                if (empty($size_list['height'])) {                    $item_list[$key]['height'] = '200';                } else {                    $item_list[$key]['height'] = $size_list['height'];                }            } else {                $item_list[$key]['width'] = '300';                $item_list[$key]['height'] = '200';            }            // 如果没有图片，则不显示            if (!empty($item_list[$key]['thumb'])) {                $item_list[$key]['isshow'] = 1;            }        }        return $item_list;    }    // 服务指南    protected function itemServiceContent($_id, $limit = 50, $offset = 0, $length = 60, $sort_by = 0, $date_format = 0) {        $this->load->model('service_content_model', 'service_content');        $filter = array('type' => (string) $_id, 'status' => true, 'removed' => false, 'site_id' => $this->site_id);        $select = array('_id', 'title', 'branch_id', 'confirm_date', 'download', 'policy');        $arr_sort = array('sort' => 'DESC');        $date_format = $this->date_foramt[$date_format];        $item_list = $this->service_content->find($filter, $limit, $offset, $select, $arr_sort);        foreach ($item_list as $key => $item) {            $item_list[$key]['_id'] = (string) ($item['_id']);            $item_list[$key]['url'] = '/service/contentDetail/' . $item['_id'] . '.html';            if (mb_strlen($item['title']) > $length) {                $item_list[$key]['short_title'] = mb_substr($item['title'], 0, $length) . '...';            } else {                $item_list[$key]['short_title'] = $item['title'];            }            // 取部门            if (isset($this->branch_list[$item['branch_id']])) {                $item_list[$key]['branch'] = $this->branch_list[$item['branch_id']];                $item_list[$key]['branch_url'] = '/supervision/branch/?_id=' . $item['branch_id'];            } else {                $item_list[$key]['branch'] = '';            }            $item_list[$key]['date'] = ($item['confirm_date']) ? date($date_format, $item['confirm_date']) : '';        }        return $item_list;    }    //信件统计    protected function counterSupervision() {        $this->load->model('supervision_counter_model', 'supervision_counter');        $supervision_counter = $this->supervision_counter->find(array("site_id" => $this->site_id));        if (!empty($supervision_counter)) {            $supervision_status = array("unknown", "newmessage", "assigned", "replied", "thenask", "resolved", "total");            //本日            foreach ($supervision_counter['today_counter'] as $key => $item) {                $today_counter[$supervision_status[$key]] = $item;            }            //本月            foreach ($supervision_counter['this_month_counter'] as $key => $item) {                $this_month_counter[$supervision_status[$key]] = $item;            }            //本年            foreach ($supervision_counter['this_year_counter'] as $key => $item) {                $this_year_counter[$supervision_status[$key]] = $item;                $this_year_counter[$supervision_status[6]] = $this_year_counter[$supervision_status[6]] + $item;            }        }        unset($supervision_counter);        $supervision_counter = array(            "today_counter" => $today_counter,            "this_month_counter" => $this_month_counter,            "this_year_counter" => $this_year_counter,        );        //$this->load->model('supervision_model', 'supervision');        //当前年份开始时间        //$year_time = mktime(0, 0, 0, 01, 01, date("Y"));        //$year_time = date("Y-m-d", mktime(0, 0, 0, 01, 01, date("Y")));        //咨询        //$supervision_counter['consult'] = $this->supervision->listCount(NULL, array("question_id" => "51a57d99df85a70d545ec0ea", 'site_id' => $this->site_id, 'status' => True, 'removed' => false), $year_time);        //建议        //$supervision_counter['suggest'] = $this->supervision->listCount(NULL, array("question_id" => "51a57e10df85a70d545ec0ec", 'site_id' => $this->site_id, 'status' => True, 'removed' => false), $year_time);        //投诉        //$supervision_counter['complaint'] = $this->supervision->listCount(NULL, array("question_id" => "51a57df3df85a70d545ec0eb", 'site_id' => $this->site_id, 'status' => True, 'removed' => false), $year_time);        //举报        //$supervision_counter['report'] = $this->supervision->listCount(NULL, array("question_id" => "53f478449a05c2d448d9e916", 'site_id' => $this->site_id, 'status' => True, 'removed' => false), $year_time);        return $supervision_counter;    }    //部门信件满意度排行    protected function ratingBranch($limit, $offset, $length, $sort_by) {        $this->load->model('supervision_rating_counter_model', 'supervision_rating_counter');        $arr_sort = array("total" => "DESC");        $record = $this->supervision_rating_counter->find(NULL, $limit, $offset, "*", $arr_sort);        if (!empty($record) && $limit == 1) {            $item_list[] = $record;        } else {            $item_list = $record;        }        foreach ($item_list as $key => $item) {            $item_list[$key]['key'] = $key + 1;			$item_list[$key]['url'] = '/supervision/branch/' . $item['branch_id'] . "/";            if (isset($this->branch_list[$item['branch_id']])) {                $item_list[$key]['branch_name'] = $this->branch_list[$item['branch_id']];            } else {                $item_list[$key]['branch_name'] = '';            }        }        return $item_list;    }    protected function leaderList($_id_list, $limit = 10, $offset = 0, $joblength = 0, $namelength = 0, $sort_by = 0, $date_format = 0) {        $arr_sort = array('sort' => 'DESC');        $date_format = $this->date_foramt[$date_format];        $select = array('_id', 'job_title', 'name', 'bid', 'photo', 'type_id');        $this->load->model('site_leader_model', 'site_leader');        $item_list = $this->site_leader->find(array('type_id' => $_id_list, 'status' => True, 'removed' => False, 'site_id' => $this->site_id), $limit, $offset, $select, $arr_sort);        if ($limit == 1 && $item_list) {            $item_list = array(0 => $item_list);        }        foreach ($item_list as $key => $item) {            if (mb_strlen($item['name']) > $namelength) {                $item_list[$key]['short_name'] = mb_substr($item['name'], 0, $namelength);            } else {                $item_list[$key]['short_name'] = $item['name'];            }            if (mb_strlen($item['job_title']) > $joblength) {                $item_list[$key]['short_job'] = mb_substr($item['job_title'], 0, $joblength);            } else {                $item_list[$key]['short_job'] = $item['job_title'];            }            $item_list[$key]['url'] = '/leader/?type=' . $item['type_id'] . '&_id=' . $item['_id'];        }        return $item_list;    }			  protected function opennessList($branch_id, $where_array, $limit = 10, $offset = 0, $length = 60, $date_format = 0, $code = null) {        $this->load->model('openness_content_model', 'openness_content');        $this->load->model('site_branch_model', 'site_branch');        $this->load->model('openness_column_model', 'openness_column');        $arr_sort = array('sort' => 'DESC', 'openness_date' => 'DESC', 'create_date' => 'DESC');        $date_format = $this->date_foramt[$date_format];        $where_array['status'] = True;        $where_array['removed'] = False;        $select = array('_id', 'title', 'serial_number', 'create_date', 'tag', 'document_number', 'branch_id', 'column_id', 'column_code', 'openness_date', 'id');        $item_list = $this->openness_content->findList($branch_id, $where_array, $limit, $offset, $select, $arr_sort, $code);        foreach ($item_list as $key => $item) {            if ($item['branch_id']) {                $this_branch = $this->site_branch->find(array('_id' => $item['branch_id']));                $item_list[$key]['branch'] = $this_branch['name'];            }            if ($item['column_code'] && $item['branch_id']) {                $this_column = $this->openness_column->find(array('code' => (string) $item['column_code'], 'branch_id' => $item['branch_id']));                $item_list[$key]['column'] = $this_column['name'];            }            $item_list[$key]['_id'] = (string) ($item['_id']);            if (mb_strlen($item['title']) > $length) {                $item_list[$key]['title'] = mb_substr($item['title'], 0, $length) . '...';            }            $item_list[$key]['date'] = $item['openness_date'];            $item_list[$key]['url'] = "/openness/detail/content/" . $item['_id'] . '.html';        }        return $item_list;    }		    public function index() {	        $View = new Blitz('template/interaction/ratingbmm.html');        $struct_list = $View->getStruct();        $a=array('a'=> 'b');        foreach ($struct_list as $struct) {            $matches = array();            if (preg_match('@^/([a-z]+)-([\w\-]+)/$@', $struct, $matches)) {                $action = $matches[1];                $struct_val = trim($matches[0], '/');                $item_list = '';                //栏目列表                if ($action == 'list') {                    list($channel_id, $limit, $offset, $length, $sort_by, $date_format, $description_length) = explode('_', $matches[2]);                    $this->load->model('site_channel_tree_model', 'site_channel_tree');                    $this_channel = $this->site_channel_tree->find(array('_id' => $channel_id));                    if (!empty($this_channel['child'])) {                        unset($_id_list);                        foreach ($this_channel['child'] as $key => $val)                            $_id_list[] = $key;                    } else {                        $_id_list = explode('-', $channel_id);                    }                    $item_list = $this->itemList($_id_list, $limit, $offset, $length, $sort_by, $date_format, $description_length);                } elseif ($action == 'branch') {                    // 部门列表                    list($channel_id, $limit, $offset, $length) = explode('_', $matches[2]);                    $item_list = $this->itemBranch($channel_id, $limit, $offset, $length);                } elseif ($action == 'supervision') {                    //信箱列表                    list($channel_id, $limit, $offset, $length, $sort_by, $date_format) = explode('_', $matches[2]);                    $item_list = $this->itemSupervision(array("product_id" => 3), $limit, $offset, $length, $sort_by, $date_format);                } elseif ($action == 'live') {                    // 在线访谈                    list($channel_id, $limit, $offset, $length, $sort_by, $date_format, $time_length, $description_length) = explode('_', $matches[2]);                    $item_list = $this->itemLive(1, $limit, $offset, $length, $sort_by, $date_format, $time_length, $description_length);                } else if ($action == 'nextlive') {// 下期预告                    list($channel_id, $limit, $offset, $length, $sort_by, $date_format, $time_length, $description_length) = explode('_', $matches[2]);                    if ($channel_id == "all") {                        $_id_list = NULL;                    }                    $item_list = $this->itemLive(1, $limit, $offset, $length, $sort_by, $date_format, $time_length, $description_length, TRUE);                } elseif ($action == 'comment') {                    //评议列表                    list($channel_id, $limit, $offset, $length, $sort_by, $date_format) = explode('_', $matches[2]);                    $item_list = $this->itemComment($limit, $offset, $length, $sort_by, $date_format);                } elseif ($action == 'coll') {                    // 民意征集                    list($channel_id, $limit, $offset, $length, $sort_by, $date_format) = explode('_', $matches[2]);                    $item_list = $this->itemColl($channel_id, $limit, $offset, $length, $sort_by, $date_format);                } elseif ($action == 'vote') {                    // 在线调查                    list($channel_id, $limit, $offset, $length, $sort_by, $date_format) = explode('_', $matches[2]);                    if ($channel_id == 'all') {                        $channel_id = null;                    }                    $item_list = $this->itemVote($channel_id, $limit, $offset, $length, $sort_by, $date_format);                } elseif ($action == 'advert') {                    // 广告管理                    list($location_id, $limit, $offset) = explode('_', $matches[2]);                    $item_list = $this->advertList((string) $location_id, $limit, $offset);                } elseif ($action == 'counter') {                    // 信箱回复排行                    list($type, $limit, $offset) = explode('_', $matches[2]);                    $item_list = $this->itemSupervisionBranchCounter($limit, array($type => 'DESC'));                } elseif ($action == 'friendlink') {                    list($channel_id, $limit, $offset, $length, $date_format) = explode('_', $matches[2]);                    $item_list = $this->friendLinkList($channel_id, $limit, $offset, $length, $date_format);                } elseif ($action == 'rating') {                    //部门信件满意度排行                    list($type,$limit, $offset, $length, $sort_by) = explode('_', $matches[2]);                    $item_list = $this->ratingBranch($limit, $offset, $length, $sort_by);                } elseif ($action == 'product') {                    //信箱类型                    list($product_id, $limit, $offset, $length, $sort_by, $date_format) = explode('_', $matches[2]);                    $item_list = $this->itemSupervision(array("product_id" => (int) $product_id), $limit, $offset, $length, $sort_by, $date_format);                } elseif ($action == 'leader') {                    list($channel_id, $limit, $offset, $joblength, $namelength) = explode('_', $matches[2]);                    $item_list = $this->leaderList((string) $channel_id, $limit, $offset, $joblength, $namelength);                } elseif ($action == 'newletter') {                    //最新信件                    list($channel_id, $limit, $offset, $length, $sort_by, $date_format) = explode('_', $matches[2]);                    $item_list = $this->itemSupervision(array("product_id" => 3), $limit, $offset, $length, $sort_by, $date_format);                }elseif ($action == 'newreply') {                    //最新信件                    list($channel_id, $limit, $offset, $length, $sort_by, $date_format) = explode('_', $matches[2]);                    $item_list = $this->itemSupervision(array("process_status" => (int) $channel_id), $limit, $offset, $length, $sort_by, $date_format);                }elseif ($action == 'openness') {                    list($branch_id, $column_code, $limit, $offset, $length, $sort_by, $date_format) = explode('_', $matches[2]);                    $where_array = null;                    if (strlen($branch_id) == 1) {                        $where_array = array('branch_type' => (int) $branch_id);                        $branch_id = null;                    } elseif ($branch_id == 'all') {                        $branch_id = null;                    } elseif ($column_code == 'all') {                        $column_code = null;                    }                    $item_list = $this->opennessList($branch_id, $where_array, $limit, $offset, $length, $date_format, (int) $column_code);                }                $this->data[$struct_val] = $item_list;            }        }        $supervision_counter = $this->counterSupervision();        //今日受理与其他不同是(受理 = 今日处理中+今日已处理+今日再追问+今日已解决)        $supervision_counter['today_counter']['accept'] = (int) $supervision_counter['today_counter']["assigned"] + (int) $supervision_counter['today_counter']["replied"] + (int) $supervision_counter['today_counter']["thenask"] + (int) $supervision_counter['today_counter']["resolved"];        $supervision_counter['today_counter']['resolved'] = (int) $supervision_counter['today_counter']["replied"] + (int) $supervision_counter['today_counter']["thenask"] + (int) $supervision_counter['today_counter']["resolved"];        //今日        $this->data['today_counter'] = $supervision_counter['today_counter'];        //本月受理与其他不同是(受理 = 今日处理中+今日已处理+今日再追问+今日已解决)        $supervision_counter['this_month_counter']['accept'] = (int) $supervision_counter['this_month_counter']["assigned"] + (int) $supervision_counter['this_month_counter']["replied"] + (int) $supervision_counter['this_month_counter']["thenask"] + (int) $supervision_counter['this_month_counter']["resolved"];        $supervision_counter['this_month_counter']['resolved'] = (int) $supervision_counter['this_month_counter']["replied"] + (int) $supervision_counter['this_month_counter']["thenask"] + (int) $supervision_counter['this_month_counter']["resolved"];        //本月        $this->data['this_month_counter'] = $supervision_counter['this_month_counter'];        //本月受理与其他不同是(受理 = 今日处理中+今日已处理+今日再追问+今日已解决)        $supervision_counter['this_year_counter']['accept'] = (int) $supervision_counter['this_year_counter']["assigned"] + (int) $supervision_counter['this_year_counter']["replied"] + (int) $supervision_counter['this_year_counter']["thenask"] + (int) $supervision_counter['this_year_counter']["resolved"];        $supervision_counter['this_year_counter']['resolved'] = (int) $supervision_counter['this_year_counter']["replied"] + (int) $supervision_counter['this_year_counter']["thenask"] + (int) $supervision_counter['this_year_counter']["resolved"];        //今年        $this->data['this_year_counter'] = $supervision_counter['this_year_counter'];        //累计：主题15858 条 | 回复51288 条 发帖：今日14 条 | 昨日47 条        // $this->data['total_counter'] = $this->supervision->count(array('removed' => false));        // $this->data['total_resolved_counter'] = $this->supervision->count(array('removed' => false, 'process_status' => array('$gte' => 3)));        $start_date = mktime(0, 0, 0, date("m"), date("d"), date("Y"));        $end_date = mktime(23, 59, 59, date("m"), date("d"), date("Y"));        // $this->data['today_counter'] = $this->supervision->count(array('removed' => false, 'create_date' => array('$gt' => $start_date, '$lt' => $end_date)));        $start_date = mktime(0, 0, 0, date("m"), date("d") - 1, date("Y"));        $end_date = mktime(23, 59, 59, date("m"), date("d") - 1, date("Y"));        // $this->data['yesterday_counter'] = $this->supervision->count(array('removed' => false, 'create_date' => array('$gt' => $start_date, '$lt' => $end_date)));        $account_id = $_SESSION['account_id'];        $login_status = FALSE;        if ($account_id) {            $login_status = TRUE;        }        // $this->data['login_status'] = $login_status;        // $this->data['banshi_service'] = file_get_contents('./data/banshi_service.dat');        // $this->data['tongji'] = file_get_contents('./data/tongji.dat');        //var_dump($data['login_status']);        $View->display($this->data);    }}/* End of file interaction.php *//* Location: ./application/controllers/interaction.php */