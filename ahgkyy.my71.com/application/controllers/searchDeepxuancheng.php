<?phpclass searchDeep extends MY_Controller {    public function __construct() {        parent::__construct();        $this->load->model('content_model', 'content');        $this->load->model('service_content_model', 'service_content');        $this->load->model('openness_content_model', 'openness_content');        $this->load->model('site_channel_tree_model', 'site_channel_tree');        $this->load->model('supervision_model', 'supervision');    }    protected function searchList($keywords = NULL, $from_date, $to_date, $limit = 10, $offset = 0, $length = 60, $date_format = 0, $description_length, $field = null, $type, $sort, $search_where) {		if($type == 'news'){			$select = array('_id', 'title', 'description', 'release_date','channel','link_url');			$arr_sort = array('sort' => $sort);		}		if($type == 'supervision'){			$select = array('_id', 'process_status', 'question_id', 'subject', 'create_date', 'confirm_date', 'link_url','message');			$arr_sort = array('create_date' => $sort);		}		if($type == 'service'){			$select = array('_id', 'title', 'release_date','link_url','content');			$arr_sort = array('sort' => $sort);		}		if($type == 'openness'){			$select = array('_id', 'title', 'serial_number', 'create_date', 'document_number',  'column_id', 'column_code', 'openness_date', 'id','link_url','body');			$arr_sort = array('openness_date' => $sort);		}		        $date_format = $this->date_foramt[$date_format];		        if ($type == 'service') {            $item_list = $this->service_content->searchList(null, $keywords, array('status' => True, 'removed' => false, 'site_id' => $this->site_id), $from_date, $to_date, $limit, $offset, $select, $arr_sort, $field);        } elseif ($type == 'openness') {			$item_list = $this->openness_content->searchList(null, array('status' => True, 'removed' => false, 'site_id' => $this->site_id), $limit, $offset, $select, $arr_sort, array($field=>$keywords),$from_date, $to_date,$keyword,$field);        } elseif ($type == 'supervision') {			$item_list = $this->supervision->searchList($keywords, $search_where, $from_date, $to_date, $limit, $offset, '*', $arr_sort,$field);        } else {            $item_list = $this->content->findList(null, $keywords, array('status' => True, 'removed' => false, 'site_id' => $this->site_id), $from_date, $to_date, $limit, $offset, $select, $arr_sort, $field);        }		        foreach ($item_list as $key => $item) {            $item_list[$key]['_id'] = (string) ($item['_id']);						if($type=="news"){				$item['channel']=array_reverse($item['channel']);				$channel_id = $item['channel'][0];				$channel_tree = $this->site_channel_tree->find(array('_id' => $channel_id), 1);				if (!isset($item['channel'][0]) || empty($item['channel'][0]) || empty($channel_tree)) {					 unset($item_list[$key]);					 continue;				}				$item_list[$key]['menu_name'] = '<li class="detail_search_column">所在栏目：'.$channel_tree['name'].'</li>';								$item['title'] = strip_tags(html_entity_decode($item['title']));				if (mb_strlen($item['title']) > $length) {					$item_list[$key]['short_title'] = mb_substr($item['title'], 0, $length) . '...';				} else {					$item_list[$key]['short_title'] = $item['title'];				}				$item_list[$key]['short_title'] = str_replace($keywords, '<font color="red">'.$keywords.'</font>', $item_list[$key]['short_title']);								$item['description'] = str_replace("\n", "<br/>", str_replace(Chr(32), "&nbsp;", $item['description']));				if (mb_strlen($item['description']) > $description_length) {					$item_list[$key]['description'] = mb_substr($item['description'], 0, $description_length) . '...';				}				$item_list[$key]['description'] = str_replace($keywords, '<font color="red">'.$keywords.'</font>', $item_list[$key]['description']);				$item_list[$key]['date'] = ($item['release_date']) ? date($date_format, $item['release_date']) : '';				$item_list[$key]['url'] = !empty($item['link_url']) ? $item['link_url'] : ''.$this->folder_prefix . '/detail/' . $item['_id'] . '.html';			}			            if($type=='supervision'){				$product_name = array("未知信箱", "书记信箱", "市长信箱", "部门信箱", "县长信箱");				$item_list[$key]['menu_name'] = '<li class="detail_search_column">所在栏目：'.$product_name[$item['product_id']].'</li>';				if (mb_strlen($item['subject']) > $length) {                $item_list[$key]['short_title'] = mb_substr($item['subject'], 0, $length) . '...';				} else {					$item_list[$key]['short_title'] = $item['subject'];				}				$item_list[$key]['short_title'] = str_replace($keywords, '<font color="red">'.$keywords.'</font>', $item_list[$key]['short_title']);				$item['description'] = str_replace("\n", "<br/>", str_replace(Chr(32), "&nbsp;", $item['message']));				if (mb_strlen($item['description']) > $description_length) {					$item_list[$key]['description'] = mb_substr(strip_tags($item['description']), 0, $description_length) . '...';				}				$item_list[$key]['description'] = str_replace($keywords, '<font color="red">'.$keywords.'</font>', $item_list[$key]['description']);				 $item_list[$key]['date'] = ($item['create_date']) ? date($date_format, $item['create_date']) : '';				 $item_list[$key]['url'] = $item_list[$key]['url'] = '/supervision/detail/' . $item['_id'] . '.html';			} 			if($type=='service'){				$item['title'] = strip_tags(html_entity_decode($item['title']));				if (mb_strlen($item['title']) > $length) {					$item_list[$key]['short_title'] = mb_substr($item['title'], 0, $length) . '...';				} else {					$item_list[$key]['short_title'] = $item['title'];				}				$item_list[$key]['short_title'] = str_replace($keywords, '<font color="red">'.$keywords.'</font>', $item_list[$key]['short_title']);				$item['description'] = str_replace("\n", "<br/>", str_replace(Chr(32), "&nbsp;", $item['content']));				if (mb_strlen($item['description']) > $description_length) {					$item_list[$key]['description'] = mb_substr(strip_tags($item['description']), 0, $description_length) . '...';				}				$item_list[$key]['description'] = str_replace($keywords, '<font color="red">'.$keywords.'</font>', $item_list[$key]['description']);								$item_list[$key]['date'] = ($item['release_date']) ? date($date_format, $item['release_date']) : '';				$item_list[$key]['url'] = !empty($item['link_url']) ? $item['link_url'] : '/service/detail/' . $item['_id'] . '.html';			}						if($type=='openness'){				$item['title'] = strip_tags(html_entity_decode($item['title']));				if (mb_strlen($item['title']) > $length) {					$item_list[$key]['short_title'] = mb_substr($item['title'], 0, $length) . '...';				} else {					$item_list[$key]['short_title'] = $item['title'];				}				$item_list[$key]['short_title'] = str_replace($keywords, '<font color="red">'.$keywords.'</font>', $item_list[$key]['short_title']);				$item['description'] = str_replace("\n", "<br/>", str_replace(Chr(32), "&nbsp;", $item['body']));				if (mb_strlen($item['description']) > $description_length) {					$item_list[$key]['description'] = mb_substr(strip_tags($item['description']), 0, $description_length) . '...';				}				$item_list[$key]['description'] = str_replace($keywords, '<font color="red">'.$keywords.'</font>', $item_list[$key]['description']);				$item_list[$key]['date'] = ($item['openness_date']) ? $item['openness_date'] : '';				$item_list[$key]['url'] = !empty($item['link_url']) ? $item['link_url'] : '/openness/detail/content/' . $item['_id'] . '.html';			}          }               return $item_list;    }    protected function searchCount($keywords = NULL, $field = null, $type, $from_date, $to_date, $search_where) {            $countService = $this->service_content->searchCount(null, $keywords, $search_where, $from_date, $to_date, $field);            $countOpenness = $this->openness_content->searchCount(null, $search_where,array($field=>$keywords),$from_date, $to_date);						$countSupervision = $this->supervision->searchCount($keywords, $search_where,$from_date, $to_date);			            $countContent = $this->content->listCount(null, $keywords, $search_where, $from_date, $to_date, $field);						$count['service'] = $countService;			$count['openness'] = $countOpenness;			$count['news'] = $countContent;			$count['supervision'] = $countSupervision;        return $count;    }    protected function getMenu($channel_id, $limit = 50, $offset = 0, $length = 60) {        $result = array();        $channel_tree = $this->site_channel_tree->find(array('_id' => $channel_id), 1);        if (isset($channel_tree['child'])) {            $i = 0;            foreach ($channel_tree['child'] as $key => $value) {                if ($i >= $limit) {                    break;                }                if ($i < $offset) {                    continue;                }                $result[$key] = $value;                $i++;            }        }        return $result;    }    public function index() {        $View = new Blitz('template/search/advanced-search.html');        $data = array();        $View->display($data);    }    public function search() {        $keywords = $this->security->xss_clean($this->input->get('keywords'));        $page = (int) $this->security->xss_clean($this->input->get('page'));        if ($page == 0) {            $page = 1;        }        $jsfw = $this->input->get('jsfw') ? $this->security->xss_clean((string) $this->input->get('jsfw')) : null;        $field = $this->input->get('field') ? $this->security->xss_clean((string) $this->input->get('field')) : null;        $datecode = $this->input->get('datecode') ? $this->security->xss_clean((string) $this->input->get('datecode')) : null;        $type = $this->input->get('type') ? (string) $this->security->xss_clean($this->input->get('type')) : null;        $from_date = $this->input->get('from_date') ? (string) $this->security->xss_clean($this->input->get(from_date)) : null;        $to_date = $this->input->get('to_date') ? (string) $this->security->xss_clean($this->input->get('to_date')) : null;        $sort = $this->input->get('px') ? (string) $this->security->xss_clean($this->input->get('px')) : null;        $pageTotal = $this->input->get('pageTotal') ? (int) $this->security->xss_clean($this->input->get('pageTotal')) : null;				if($datecode == 'day'){			$from_date = date('Y-m-d',time()-86400);			$to_date = date('Y-m-d',time());		}		if($datecode == 'week'){			$from_date = date("Y-m-d",strtotime("-1 week"));			$to_date = date('Y-m-d',time());		}		if($datecode == 'month'){			$from_date = date("Y-m-d",strtotime("-1 month"));			$to_date = date('Y-m-d',time());		}		if($datecode == 'year'){			$from_date = date("Y-m-d",strtotime("-1 year"));			$to_date = date('Y-m-d',time());		}						/*-----检索条件 begin-----*/		if($type == 'news'){			$search_where = array('status' => True, 'removed' => False, 'site_id' => $this->site_id);		}		if($type == 'supervision'){			if($jsfw = 'all'){				$search_where = array('status' => True, 'removed' => False, 'site_id' => $this->site_id);			}else{				$search_where = array('status' => True, 'removed' => False, 'site_id' => $this->site_id, 'question_id' => $jsfw);			}		}		if($type == 'service'){			if($jsfw = 'all'){				$search_where = array('status' => True, 'removed' => False, 'site_id' => $this->site_id);			}else{				$search_where = array('status' => True, 'removed' => False, 'site_id' => $this->site_id, 'question_id' => $jsfw);			}		}		if($type == 'openness'){			$search_where = array('status' => True, 'removed' => False, 'site_id' => $this->site_id);		}		/*-----检索条件 end-----*/				        $total_row = $this->searchCount($keywords, $field, $type, $from_date, $to_date, $search_where);                $View = new Blitz('template/search/detail-search.html');				        $struct_list = $View->getStruct();        $data = array();        foreach ($struct_list as $struct) {            $matches = array();            if (preg_match('@^/([a-z]+)-([\w\-]+)/$@', $struct, $matches)) {                $action = $matches[1];                $struct_val = trim($matches[0], '/');                $item_list = '';                //列表                if ($action == 'search') {                    list($limit, $offset, $length, $date_format, $description_length) = explode('_', $matches[2]);					if($limit == 'pageTotal'){						$limit = $pageTotal;					}                    if ($offset == 'page') {                        $offset = $limit * ($page - 1);                    }                    $item_list = $this->searchList($keywords, $from_date, $to_date, $limit, $offset, $length, $date_format, $description_length, $field, $type, $sort, $search_where);                } elseif ($action == 'page') {                    $per_count = (int) $matches[2];                    if ($per_count == 0) {                        $per_count = $pageTotal;                    }                    $link = $this->getPagination($total_row[$type], $page, $per_count, 0);                    $item_list['page'] = $link;                } elseif ($action == 'menu') {                    list($parent_id, $limit, $offset, $length) = explode('_', $matches[2]);                    if ($parent_id != 'current') {                        $channel_id = $parent_id;                    } else {                        $channel_id = $parent_channel['_id'];                    }                    $menu_list = $this->getMenu($channel_id, $limit, $offset, $length);                    $i = 0;                    foreach ($menu_list as $key => $menu) {                        $item_list[$i]['_id'] = $key;                        $item_list[$i]['url'] = $this->folder_prefix . '/channel/' . $key . '/';                        $item_list[$i]['name'] = $menu;                        $i++;                    }                }                $data[$struct_val] = $item_list;            }        }		if($total_row[$type] == 0){			$data['totalnone'] = true;		}        $data = array_merge($data, array(			'total_row' => $total_row,            'keywords' => $keywords,            'jsfw' => $jsfw,            'field' => $field,			'datecode' => $datecode,            'beginDate' => $from_date,            'endDate' => $to_date,			'px' => $sort,            'pageTotal' => $pageTotal,            'type' => $type,            'folder_prefix' => $this->folder_prefix,        ));		        $View->display($data);    }}?>