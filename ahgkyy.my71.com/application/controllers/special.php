<?phpclass special extends MY_Controller {    private $special_name = "专题报道";    public function __construct() {        parent::__construct();        $this->load->model('special_model', 'special');        $this->load->model('special_content_model', 'special_content');        $this->load->model('special_column_model', 'special_column');    }    // 取出所有专题    protected function specialList($limit = 10, $offset = 0, $length = 60, $sort_by = 0, $date_format = 0, $description_length) {        $arr_sort = array('sort' => 'DESC');        $date_format = $this->date_foramt[$date_format];        $select = array('_id', 'title', 'create_date', 'link_url','thumb','description');        $filter = array('status' => true, 'removed' => false, 'site_id' => $this->site_id);        $item_list = $this->special->find($filter, $limit, $offset, $select, $arr_sort);        foreach ($item_list as $key => $item) {            $item_list[$key]['_id'] = (string) ($item['_id']);            if (mb_strlen($item['title']) > $length) {                $item_list[$key]['short_title'] = mb_substr($item['title'], 0, $length) . '...';            } else {                $item_list[$key]['short_title'] = $item['title'];            }            $item_list[$key]['url'] = empty($item['link_url']) ? '/special/column/?_id=' . $item['_id'] : $item['link_url'];            $item_list[$key]['date'] = ($item['create_date']) ? date($date_format, $item['create_date']) : '';            $item['description'] = str_replace(Chr(32), " ", $item['description']);            if(mb_strlen($item['description']) > $description_length){                $item_list[$key]['description'] = $this->msubstr($item['description'], $description_length). '...' ;            }else{                $item_list[$key]['description'] = $item['description'];            }        }        return $item_list;    }    // 专题栏目    protected function columnList($_id_list, $limit = 10, $offset = 0, $length = 60, $sort_by = 0, $date_format = 0) {        $arr_sort = array('create_date' => 'DESC');        $date_format = $this->date_foramt[$date_format];        $select = array('_id', 'name', 'create_date');        $filter = array('special_id' => $_id_list, 'removed' => false);        $item_list = $this->special_column->find($filter, $limit, $offset, $select, $arr_sort);        foreach ($item_list as $key => $item) {            $item_list[$key]['_id'] = (string) ($item['_id']);            if (mb_strlen($item['name']) > $length) {                $item_list[$key]['short_title'] = mb_substr($item['name'], 0, $length) . '...';            } else {                $item_list[$key]['short_title'] = $item['name'];            }            $item_list[$key]['title'] = $item['name'];            $item_list[$key]['url'] = '/special/content/?_id=' . $item['_id'];            $item_list[$key]['date'] = ($item['create_date']) ? date($date_format, $item['create_date']) : '';        }        return $item_list;    }    // 专题内容    protected function contentList($special_id,$column_id, $limit = 10, $offset = 0, $length = 60, $sort_by = 0, $date_format = 0, $description_length = 0, $is_pic = false) {        $arr_sort = array('create_date' => 'DESC');        $date_format = $this->date_foramt[$date_format];        $select = array('_id', 'title', 'release_date', 'body', 'thumb', 'link_url');        if(empty($column_id)){            // 如果是图片，过滤没有图片的            if ($is_pic) {                $filter = array('special_id'=>$special_id,'thumb' => array("\$ne" => ""), 'status' => true, 'removed' => false, 'site_id' => $this->site_id);            } else {                $filter = array('special_id'=>$special_id,'status' => true, 'removed' => false, 'site_id' => $this->site_id);            }        }else{            // 如果是图片，过滤没有图片的            if ($is_pic) {                $filter = array('special_id'=>$special_id,'column_id' => $column_id, 'thumb' => array("\$ne" => ""), 'status' => true, 'removed' => false, 'site_id' => $this->site_id);            } else {                $filter = array('special_id'=>$special_id,'column_id' => $column_id, 'status' => true, 'removed' => false, 'site_id' => $this->site_id);            }        }        $item_list = $this->special_content->find($filter, $limit, $offset, $select, $arr_sort);        // echo "<pre>";        // var_dump($item_list);        if ($limit == 1 && !empty($item_list)) {            $item_list = array(0 => $item_list);        }        foreach ($item_list as $key => $item) {            $item_list[$key]['_id'] = (string) ($item['_id']);            if (mb_strlen($item['title']) > $length) {                $item_list[$key]['short_title'] = mb_substr($item['title'], 0, $length) . '...';            } else {                $item_list[$key]['short_title'] = $item['title'];            }            if ($description_length != 0) {                if (mb_strlen($item['body']) > $description_length) {                    $item_list[$key]['description'] = mb_substr(str_replace("&nbsp;", "", strip_tags($item['body'])), 0, $description_length) . '...';                } else {                    $item_list[$key]['description'] = str_replace("&nbsp;", "", strip_tags($item['body']));                }            }            $item_list[$key]['url'] = empty($item['link_url']) ? '/special/detail/?_id=' . $item['_id'] : $item['link_url'];            $item_list[$key]['date'] = ($item['release_date']) ? date($date_format, $item['release_date']) : '';        }        return $item_list;    }    // 专题内容    protected function menuList($filter, $limit = 10, $offset = 0, $length = 60) {        $arr_sort = array('create_date' => 'asc');        $select = array('_id', 'name');        $item_list = $this->special_column->find($filter, $limit, $offset, $select, $arr_sort);        if ($limit == 1 && !empty($item_list)) {            $item_list = array(0 => $item_list);        }        $i = 0;        foreach ($item_list as $key => $item) {            $item_list[$key]['i'] = $i;            if ($i == 0) {                $item_list[$key]['aon'] = "class='aon'";            }            $item_list[$key]['count'] = $limit - 1;            $item_list[$key]['name'] = $item['name'];            $item_list[$key]['url'] = '/special/content/?_id=' . $item['_id'];            $i++;        }        return $item_list;    }    public function index() {        $page = (int) $this->input->get('page');        if ($page == 0) {            $page = 1;        }        $total_row = $this->special->count(array('status' => True, 'removed' => false, 'site_id' => $this->site_id));        $View = new Blitz('template/special-list.html');        $struct_list = $View->getStruct();        foreach ($struct_list as $struct) {            $matches = array();            if (preg_match('@^/([a-z]+)-([\w\-]+)/$@', $struct, $matches)) {                $action = $matches[1];                $struct_val = trim($matches[0], '/');                $item_list = '';                if ($action == 'speciallist') {                    list($limit, $offset, $length, $sort_by, $date_format, $description_length) = explode('_', $matches[2]);                    if ($offset == 'page') {                        $offset = $limit * ($page - 1);                    }                    $item_list = $this->specialList($limit, $offset, $length, $sort_by, $date_format, $description_length);                }                //分页                if ($action == 'page') {                    $per_count = (int) $matches[2];                    if ($per_count == 0) {                        $per_count = 20;                    }                    $item_list = array('page' => $this->getPagination($total_row, $page, $per_count, True));                }                $this->vals[$struct_val] = $item_list;            }        }        $this->vals['location'] = implode(' / ', array('<a href="/">网站首页</a>', '<a href="/special/">' . $this->special_name . '</a>'));        $View->display($this->vals);    }    // 模板首页，    public function template() {        $special_id = (string) $this->input->get('_id');        if (empty($special_id)) {            show_404('专题不存在');        }        $special = $this->special->find(array('_id' => $special_id, 'status' => true, 'removed' => false), 1);        if (empty($special)) {            show_404('专题不存在');        }        // 如果指定了模板，跳转到指定模板，        if (empty($special['template_id'])) {            header("Location: /special/column/?_id=" . $special_id);            exit();        }        $column_location = $this->special_column->find(array('special_id' => $special_id), NULL, 0, array("location"));        if ($column_location) {            foreach ($column_location as $item) {                $this->vals["loc-".(string)$item['location']] = TRUE;            }        }        // 每个模板都有指定的文件夹        $View = new Blitz('template/special/' . $special['template_id'] . '/index.html');        $struct_list = $View->getStruct();        foreach ($struct_list as $struct) {            $matches = array();            if (preg_match('@^/([a-z]+)-([\w\-]+)/$@', $struct, $matches)||preg_match('@^/IF\/([a-z]+)-([\w\-]+)/$@', $struct, $matches)) {                $action = $matches[1];                //$struct_val = trim($matches[0], '/');                $struct_val = str_replace("IF/", "", trim($matches[0], '/'));                $item_list = '';                // 取导航栏目                if ($action == 'specialmenu') {                    list($limit) = explode('_', $matches[2]);                    $item_list = $this->menuList(array('special_id' => $special_id, 'navigation_on' => true, 'removed' => false), $limit);                }                // 取栏目名称和链接                if ($action == 'column') {                    list($location_id, $offset, $limit) = explode('_', $matches[2]);                    if (!empty($location_id)) {                        if (empty($limit)) {                            $limit = 1;                        }                        $item_list = $this->menuList(array('special_id' => $special_id, 'location' => $location_id, 'removed' => false), $limit, $offset);                    }                }                if ($action == 'list' || $action == 'speciallist') {                    list($location_id, $column_offset, $limit, $offset, $length, $sort_by, $date_format, $description_length) = explode('_', $matches[2]);                    // 取出对应位置的id                    $special_column = $this->special_column->find(array('special_id' => $special_id, 'location' => $location_id), 1, $column_offset, array('_id'), array('create_date' => 'asc'));                    $column_id = (string) $special_column['_id'];                    if (!empty($special_column) || !empty($column_id)) {                        $item_list = $this->contentList($special_id,$column_id, $limit, $offset, $length, $sort_by, $date_format, $description_length);                    }                }                if ($action == 'hot') {                    list($location_id, $column_offset, $limit, $offset, $length, $sort_by, $date_format, $description_length) = explode('_', $matches[2]);                    // 取出对应位置的id                    $special_column = $this->special_column->find(array('special_id' => $special_id, 'location' => $location_id), 1, $column_offset, array('_id'), array('create_date' => 'asc'));                    $column_id = (string) $special_column['_id'];                    if (!empty($special_column) || !empty($column_id)) {                        $item_list = $this->contentList($special_id,$column_id, $limit, $offset, $length, $sort_by, $date_format, $description_length);                    }                }                // 图片                if ($action == 'slider') {                    list($location_id, $column_offset, $limit, $offset, $length, $sort_by, $date_format, $description_length) = explode('_', $matches[2]);                    // 取出对应位置的id                    $special_column = $this->special_column->find(array('special_id' => $special_id, 'location' => $location_id), 1, $column_offset, array('_id'), array('create_date' => 'asc'));                    $column_id = (string) $special_column['_id'];                    if (!empty($special_column) || !empty($column_id)) {                        $item_list = $this->contentList($special_id,$column_id, $limit, $offset, $length, $sort_by, $date_format, $description_length, true);                    }                }                //分页                if ($action == 'page') {                    $per_count = (int) $matches[2];                    if ($per_count == 0) {                        $per_count = 20;                    }                    $item_list = array('page' => $this->getPagination($total_row, $page, $per_count, True));                }                $this->vals[$struct_val] = $item_list;            }        }        // echo "<pre>";        // var_dump($item_list);        $this->vals['special'] = $special;        $View->display($this->vals);    }    // 没有模板时的专题，列出所有的栏目    public function column() {        $special_id = (string) $this->input->get('_id');        if (empty($special_id)) {            show_404('专题不存在');        }        $special = $this->special->find(array('_id' => $special_id, 'status' => true, 'removed' => false), 1);        if (empty($special)) {            show_404('专题不存在');        }        // 如果指定了模板，跳转到指定模板，        if (!empty($special['template_id'])) {            header("Location: /special/template/?_id=" . $special_id);            exit();        }        $page = (int) $this->input->get('page');        if ($page == 0) {            $page = 1;        }         $total_row = $this->special_content->count(array( 'special_id'=>$special_id,'status' => true, 'removed' => false, 'site_id' => $this->site_id));        $View = new Blitz('template/special-list.html');        $struct_list = $View->getStruct();        foreach ($struct_list as $struct) {            $matches = array();            if (preg_match('@^/([a-z]+)-([\w\-]+)/$@', $struct, $matches)) {                $action = $matches[1];                $struct_val = trim($matches[0], '/');                $item_list = '';                if ($action == 'specialcolumn') {                    list($limit, $offset, $length, $sort_by, $date_format) = explode('_', $matches[2]);                    $item_list = $this->columnList($special_id, $limit, $offset, $length, $sort_by, $date_format);                }                                if ($action == 'speciallist') {                    list($limit, $offset, $length, $sort_by, $date_format) = explode('_', $matches[2]);                                        if ($offset == 'page') {                        $offset = $limit * ($page - 1);                    }                    $item_list = $this->contentList($special_id,null, $limit, $offset, $length, $sort_by, $date_format);                }                //分页                if ($action == 'page') {                    $per_count = (int) $matches[2];                    if ($per_count == 0) {                        $per_count = 20;                    }                    $item_list = array('page' => $this->getPagination($total_row, $page, $per_count, false));                }                $this->vals[$struct_val] = $item_list;            }        }        $this->vals['location'] = implode(' / ', array('<a href="/">首页</a>', '<a href="/special/">' . $this->special_name . '</a>', $special['title']));        $View->display($this->vals);    }    public function content() {        $column_id = (string) $this->security->xss_clean($this->input->get('_id'));        if (empty($column_id)) {            show_404('专题不存在');        }        $column = $this->special_column->find(array('_id' => $column_id, 'removed' => false, 'site_id' => $this->site_id), 1);        if (empty($column)) {            show_404('专题不存在');        }        $special = $this->special->find(array('_id' => $column['special_id'], 'status' => true, 'removed' => false, 'site_id' => $this->site_id), 1);        if (empty($special)) {            show_404('专题不存在');        }        $page = (int) $this->security->xss_clean($this->input->get('page'));        if ($page == 0) {            $page = 1;        }        $total_row = $this->special_content->count(array('special_id'=>$column['special_id'],'column_id' => $column_id, 'status' => true, 'removed' => false, 'site_id' => $this->site_id));        // 如果指定了模板，跳转到指定模板，        if (!empty($special['template_id'])) {            $View = new Blitz('template/special/' . $special['template_id'] . '/list.html');        } else {            $View = new Blitz('template/special-list.html');        }        $struct_list = $View->getStruct();        foreach ($struct_list as $struct) {            $matches = array();            if (preg_match('@^/([a-z]+)-([\w\-]+)/$@', $struct, $matches)) {                $action = $matches[1];                $struct_val = trim($matches[0], '/');                $item_list = '';                // 取导航栏目                if ($action == 'specialmenu') {                    list($limit) = explode('_', $matches[2]);                    $item_list = $this->menuList(array('special_id' => (string) $special['_id'], 'navigation_on' => true, 'removed' => false), $limit);                }                if ($action == 'specialcolumn') {                    list($limit, $offset, $length, $sort_by, $date_format) = explode('_', $matches[2]);                    $item_list = $this->columnList($column['special_id'], $limit, $offset, $length, $sort_by, $date_format);                }                                if ($action == 'speciallist') {                    list($limit, $offset, $length, $sort_by, $date_format) = explode('_', $matches[2]);                    if ($offset == 'page') {                        $offset = $limit * ($page - 1);                    }                    $item_list = $this->contentList($column['special_id'],$column_id, $limit, $offset, $length, $sort_by, $date_format);                }                //分页                if ($action == 'page') {                    $per_count = (int) $matches[2];                    if ($per_count == 0) {                        $per_count = 20;                    }                    $item_list = array('page' => $this->getPagination($total_row, $page, $per_count, false));                }                $this->vals[$struct_val] = $item_list;            }        }        $this->vals['special'] = $special;        $this->vals['column'] = $column;        $this->vals['menu_id'] = $column_id;        $this->vals['location'] = implode(' / ', array('<a href="/">网站首页</a>', '<a href="/special/">' . $this->special_name . '</a>', "<a href='/special/column/?_id=" . $special['_id'] . "'>" . $special['title'] . "</a>", $column['name']));        $View->display($this->vals);    }    protected function attachList($content_id) {        $this->load->model('site_attach_model', 'site_attach');        $item_list = $this->site_attach->find(array('module_id' => $content_id), NULL);        return $item_list;    }    public function detail() {        $_id = (string) $this->input->get('_id');        $old_id = (int)$this->input->get('id');                if(!empty($old_id)){            $content = $this->special_content->find(array('old_id' => $old_id, 'status' => true, 'removed' => false), 1);//print_r($content);die();        }else{            if (empty($_id)) {                show_404('该条信息不存在');            }            $content = $this->special_content->find(array('_id' => $_id, 'status' => true, 'removed' => false), 1);        }        if (empty($content)) {            show_404('该条信息不存在');        }        if ($content['link_url']) {            header("Location:" . $content['link_url']);        }        $special = $this->special->find(array('_id' => $content['special_id'], 'status' => true, 'removed' => false), 1);        if (empty($special)) {            show_404('专题不存在');        }        // 如果指定了模板，跳转到指定模板，        if (!empty($special['template_id'])) {            $View = new Blitz('template/special/' . $special['template_id'] . '/detail.html');        } else {            $View = new Blitz('template/detail.html');        }                $content['views']++;        if(!empty($old_id)){            $this->special_content->update(array('old_id' => $old_id), array("views" => (int) $content['views']));        }else{            $this->special_content->update(array('_id' => $_id), array("views" => (int) $content['views']));        }                $column = $this->special_column->find(array('_id' => $content['column_id']), 1);        $struct_list = $View->getStruct();        foreach ($struct_list as $struct) {            $matches = array();            if (preg_match('@^/([a-z]+)-([\w\-]+)/$@', $struct, $matches)) {                $action = $matches[1];                $struct_val = trim($matches[0], '/');                $item_list = '';                // 取导航栏目                if ($action == 'specialmenu') {                    list($limit) = explode('_', $matches[2]);                    $item_list = $this->menuList(array('special_id' => (string) $special['_id'], 'navigation_on' => true, 'removed' => false), $limit);                }                $this->vals[$struct_val] = $item_list;            }        }        $content['release_date'] = ($content['release_date']) ? date('Y-m-d H:i', $content['release_date']) : '';        if (!empty($content['author'])) {            $content['author'] = '作者： ' . $content['author'];        }        if (!empty($content['copy_from'])) {            $content['copy_from'] = '信息来源： ' . $content['copy_from'];        }        if ($View->hasContext('attach')) {            $item_list = $this->attachList($_id);            $this->load->helper('number');            foreach ($item_list as $item) {                $View->block('/attach', array('_id' => $item['_id'],                    'downloads' => $item['downloads'],                    'file_size' => byte_format($item['file_size']),                    'name' => "附件：" . $item['real_name'],                    'url' => '/download/?mod=site_attach&_id=' . $item['_id'],                    'file_type' => $item['file_type'],                        )                );            }        }        $this->vals['content'] = $content;        $this->vals['column'] = $column;        $this->vals['special'] = $special;        $this->vals['location'] = implode(' / ', array('<a href="/">网站首页</a>', '<a href="/special/">' . $this->special_name . '</a>', "<a href='/special/column/?_id=" . $special['_id'] . "'>" . $special['title'] . "</a>", "<a href='/special/content/?_id=" . $column['_id'] . "'>" . $column['name'] . "</a>"));        $View->display($this->vals);    }    public function qcwy(){        $View = new Blitz('template/qcwy/index.html');        $struct_list = $View->getStruct();        foreach ($struct_list as $struct) {            $matches = array();            if (preg_match('@^/([a-z]+)-([\w\-]+)/$@', $struct, $matches)) {                $action = $matches[1];                $struct_val = trim($matches[0], '/');                $item_list = '';                if ($action == 'list') {                                        list($channel_id, $limit, $offset, $length) = explode('_', $matches[2]);                    $item_list = $this->ratingBranch($limit, $offset, $length);                }                $data[$struct_val] = $item_list;            }        }         $data = array(            'content' => $content,        );        $View->display($data);    }}/* End of file special.php *//* Location: ./application/controllers/special.php */