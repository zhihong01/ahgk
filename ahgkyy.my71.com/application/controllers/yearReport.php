<?phpclass yearReport extends MY_Controller {    public function __construct() {        parent::__construct();               $this->load->model('site_branch_model', 'site_branch');        $this->load->model('openness_annual_report_model', 'openness_annual_report');    }		protected function annualReportList($branch_id, $limit = 10, $offset = 0, $length = 60, $sort_by = 0, $date_format = 0) {        $arr_sort = array('create_date' => 'DESC');        $date_format = $this->date_foramt[$date_format];        $select = array('_id', 'title', 'confirm_date', 'create_date');        $item_list = $this->openness_annual_report->findList($branch_id, array('status' => True, 'removed' => false), NULL, NULL, NULL, $limit, $offset, $select, $arr_sort);        foreach ($item_list as $key => $item) {            $item_list[$key]['_id'] = (string) ($item['_id']);            if (mb_strlen($item['title']) > $length) {                $item_list[$key]['title'] = mb_substr($item['title'], 0, $length) . '...';            }            $item_list[$key]['date'] = ($item['create_date']) ? date($date_format, $item['create_date']) : '';            $item_list[$key]['url'] = "/openness/detail/annual_report/" . $item['_id'] . '.html';        }        return $item_list;    }		protected function branchList($parent_id, $where_array,$limit = 10, $offset = 0, $length = 60, $sort_by = 0) {        $type_id = (int) $type_id;        $arr_sort = array('sort' => 'DESC');		if(!empty($parent_id)){			$where_array['parent_id']=$parent_id;		}		$where_array['openness_on']=true;		$where_array['removed']=false;        $select = array('_id', 'name','website','parent_id');        $item_list = $this->site_branch->find($where_array, $limit, $offset, $select, $arr_sort);        foreach ($item_list as $key => $item) {            $item_list[$key]['_id'] = (string) ($item['_id']);            if (mb_strlen($item['name']) > $length) {                $item_list[$key]['short_name'] = mb_substr($item['name'], 0, $length) . '...';            }else{				$item_list[$key]['short_name'] = $item['name'];			}            if (!empty($item['website']) && $item['parent_id']=='568b889e35e31d501b399773') {//寿县部门                $item_list[$key]['url'] = $item['website'];                $item_list[$key]['target']="_blank";		            }else{				$item_list[$key]['is_website']=true;				$item_list[$key]['url'] = "/opennessContent/?branch_id=" . $item['_id'];				$item_list[$key]['url_guide'] = "opennessGuide/?branch_id=" . $item['_id'];				$item_list[$key]['url_annual_report'] = "/opennessAnnualReport/?branch_id=" . $item['_id'];		            }			        }        return $item_list;    }	    public function index() {		$current_branch_id = $this->input->get('branch_id') ? $this->input->get('branch_id') : $this->gov_branch;		$data=array();		$page = (int) $this->input->get('page');		if ($page == 0) {            $page = 1;        }		$View = new Blitz('template/openness/yearReport/zt-ndbg.html');		$total_row = $this->openness_annual_report->listCount($current_branch_id,array('status' => True, 'removed' => false));		$struct_list = $View->getStruct();        foreach ($struct_list as $struct) {            $matches = array();            if (preg_match('@^/([a-z]+)-([\w\-]+)/$@', $struct, $matches)) {                $action = $matches[1];                $struct_val = trim($matches[0], '/');                if ($action == 'list') {                    list($branch_id, $limit, $offset, $length, $sort_by, $date_format) = explode('_', $matches[2]);                    if ($branch_id != 'current') {                        $branch_id = explode('-', $branch_id);                    } else {                        $branch_id = $current_branch_id;                    }                    if ($offset == 'page') {                        $offset = $limit * ($page - 1);                    }                    $item_list = $this->annualReportList($branch_id, $limit, $offset, $length, $sort_by, $date_format);                }else if ($action == 'page') {                    $per_count = (int) $matches[2];                    if ($per_count == 0) {                        $per_count = 20;                    }                    $link = $this->getPagination($total_row, $page, $per_count);                    $item_list[0]['page'] = $link;                }elseif ($action == 'branch') {                    list($parent_id, $limit, $offset, $length, $sort_by, $date_format) = explode('_', $matches[2]);					$where_array = null;					if (strlen($parent_id) == 1) {                        $where_array = array('type_id' => (int) $parent_id);                        $parent_id = null;                    }                    $item_list = $this->branchList($parent_id,$where_array,$limit, $offset, $length, $sort_by, $date_format);                }                $data[$struct_val] = $item_list;            }        }        		$View->display($data);    }}?>